class DocumentosController < ApplicationController
  before_action :set_documento, only: [:show, :edit, :update, :destroy]
  require 'fileutils'

  def index
    redirect_to root_url
  end

  def show
  end

  def new
    @documento = Documento.new
    @assistido = Assistido.find(session["assistido_selecionado"])
    @classificacao_documento = ClassificacaoDocumento.where(tipo_documento_id: params["tipo"])
  end

  def edit
  end

  def create
    @documento = Documento.new(documento_params)
    arquivo = @documento["nome_url"]
    @tipo = params["tipo_documento"].to_i
    if arquivo
      @documento["nome_url"] = arquivo.original_filename
    end
    @documento["assistido_id"] = session["assistido_selecionado"]
    @arquivo_path = ""
    @dir_path = ""

    if @tipo == 1
      @arquivo_path = "#{Rails.root}/public/documentos/#{session["assistido_selecionado"]}/pessoais/#{@documento["nome_url"]}"
      @dir_path = "#{Rails.root}/public/documentos/#{session["assistido_selecionado"]}/pessoais/"    
    elsif @tipo == 2
      @arquivo_path = "#{Rails.root}/public/documentos/#{session["assistido_selecionado"]}/extrajudiciais/#{@documento["nome_url"]}"
      @dir_path = "#{Rails.root}/public/documentos/#{session["assistido_selecionado"]}/extrajudiciais/"      
    elsif @tipo == 3
      @arquivo_path = "#{Rails.root}/public/documentos/#{session["assistido_selecionado"]}/processos/#{@documento["processo_judicial_id"]}/#{@documento["nome_url"]}"
      @dir_path = "#{Rails.root}/public/documentos/#{session["assistido_selecionado"]}/processos/#{@documento["processo_judicial_id"]}/"
    elsif @tipo == 4
      @arquivo_path = "#{Rails.root}/public/documentos/#{session["assistido_selecionado"]}/inqueritos/#{@documento["inquerito_policial_id"]}/#{@documento["nome_url"]}"
      @dir_path = "#{Rails.root}/public/documentos/#{session["assistido_selecionado"]}/inqueritos/#{@documento["inquerito_policial_id"]}/"      
    else
      #Literalmente Nada!
    end  

    respond_to do |format|
      if @documento.save
        #Checa se o diretorio existe, caso não ele cria;
        FileUtils.mkdir_p(@dir_path) unless File.directory?(@dir_path)
        #Salva o arquivo no diretorio
        File.open(@arquivo_path, 'wb') do |file|
          file.write(arquivo.read)
        end

        @path = ""
        if @tipo == 3
          @path = @documento.processo_judicial
        elsif @tipo == 4
          @path = @documento.inquerito_policial
        else
          #literalmente nada
        end

        #O redirect de sucesso é diferente para os casos (Processo/Inquerito) e (Pessoal/Extrajudicial)
        if (@documento.processo_judicial_id == nil and @documento.inquerito_policial_id == nil)
          format.html { redirect_to "/assistidos/#{session["assistido_selecionado"]}", notice: 'Documento adicionado com sucesso.' }          
        else
          format.html { redirect_to @path, notice: 'Documento adicionado com sucesso.' }          
        end 
      else
        @assistido = Assistido.find(session["assistido_selecionado"])
        #Os laçoes abaixo retornam com a informação de erro para diferentes URLs baseado no tipo de documento que ta criado(processo, inquerito, pessoal, extrajudicial);
        if @documento.inquerito_policial_id != nil
          format.html { redirect_to "/documentos/new?tipo=#{@tipo}&inquerito=#{@documento["inquerito_policial_id"]}", alert: 'Data Ato, Classificação e Arquivo são obrigatórios.' }
        end

        if @documento.processo_judicial_id != nil
          format.html { redirect_to "/documentos/new?tipo=#{@tipo}&processo=#{@documento["processo_judicial_id"]}", alert: 'Data Ato, Classificação e Arquivo são obrigatórios.' }        
        end

        if (@documento.processo_judicial_id == nil and @documento.inquerito_policial_id == nil)
          format.html { redirect_to "/documentos/new?tipo=#{@tipo}", alert: 'Data Ato, Classificação e Arquivo são obrigatórios.' }
        end
      end
    end
  end

  def update
    respond_to do |format|
      if @documento.update(documento_params)
        format.html { redirect_to @documento, notice: 'Documento was successfully updated.' }
        format.json { head :no_content }
      else
        @assistido = Assistido.find(session["assistido_selecionado"])        
        format.html { render action: 'edit' }
        format.json { render json: @documento.errors, status: :unprocessable_entity }
      end
    end
  end

  def destroy
    @documento.destroy

    respond_to do |format|
      format.html { redirect_to :back, notice: 'Documento deletado com sucesso.' }
      format.json { head :no_content }
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_documento
      @documento = Documento.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def documento_params
      params.require(:documento).permit(:tipo_documento_id, :assistido_id, :inquerito_policial_id, :processo_judicial_id, :data, :nome_url, :resposta_necessidade, :resposta, :classificacao_documento_id, :numero_processual)
    end
end
